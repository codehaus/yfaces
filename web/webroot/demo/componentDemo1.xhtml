<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" [<!ENTITY nbsp "&#160;">]>

<ui:composition
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:t="http://myfaces.apache.org/tomahawk"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:yf="http://yfaces.codehaus.org/taglib"
	template="demoLayout.xhtml">

	<ui:define name="title">
		This page demonstrates:<br/>
		- How to use components standalone (no frames, pages, navigationcontext  etc)
		- Pushing model-attributes into the component from within the view<br/>
		- Components fault tolerance<br/>
		- Used example component: ProductQuickViewComponent<br/>
	</ui:define>
	
	<ui:define name="content">
		<h:outputText value="Pass a product instance" styleClass="h1"/>
		
<yf:productQuickView product="#{componentDemo1.demoProduct}"/>

		<hr/>
		<h:outputText value="Pass a product code" styleClass="h1"/>

<yf:productQuickView productCode="HW1100-0025" />

			<hr/>
			<h:outputText value="Pass 'null' as Product" styleClass="h1"/>
		
<yf:productQuickView product="#{null}" nothingToDisplayMessage="Nothing to display"/>

			<hr/>
			<h:outputText value="Pass nothing" styleClass="h1"/>
		
<yf:productQuickView nothingToDisplayMessage="Nothing to display"/>

	</ui:define>
	
	<ui:define name="summary">
		<ul>
			<li>Each component can be styled object-oriented, global, or both</li>
			<li>we use less global styles but almost always object oriented styling</li>
			<li>supported component attributes: see interface</li>
		</ul>
	</ui:define>
</ui:composition>
