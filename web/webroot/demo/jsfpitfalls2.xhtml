<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" [<!ENTITY nbsp "&#160;">]>

<ui:composition
	xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:t="http://myfaces.apache.org/tomahawk"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:fn="http://java.sun.com/jsp/jstl/functions"
	xmlns:c="http://java.sun.com/jstl/core"
	template="demoLayout.xhtml">

	<ui:define name="title">
		JSF Pitfalls<br/>
		Compiletime vs. Rendertime or<br/>
		JSTL Core-Tags vs. JSF Component-Tags
	</ui:define>
	
	<ui:define name="intro">
		- Why core tags aren't good
	</ui:define>

		
	<ui:define name="content">
		<t:div styleClass="head">
			A ManagedBean holds some table column data.<br/>
			Data can be added, reseted<br/>
			All cells which contains the String '2' are filtered.<br/>
		</t:div>
		<br/>
		<h:form>
			<h:commandButton value="add row" actionListener="#{pitBean2.addElement}"/>
			<h:commandButton value="reset" actionListener="#{pitBean2.reset}"/>
			<h:commandButton value="update" actionListener="#{pitBean2.update}"/>
			<h:commandButton value="switch Language" actionListener="#{pitBean2.switchLanguage}" style="margin-left:100px"/>
		</h:form>
		<br/>
		<br/>
		The row elements (unfiltered): #{htmlDemo.rows}<br/>
		<br/>
	<h:panelGrid columns="2">
		<h:panelGroup>
			<!-- Not component oriented (HTML and core tags) -->
			<!-- This approach has nothing in common with JSF -->
			<t:div styleClass="block">
				<table>
					<c:forEach items="#{pitBean2.rows}" var="row">
						<c:if test="#{!fn:contains(row, '2')}">
							<tr>
								<td>
									#{row}
								</td>
							</tr>
						</c:if>
					</c:forEach>
				</table>
			</t:div>
		</h:panelGroup>
		<h:panelGroup>
			Only compile-time tags are used<br/>
			It works but is very error prone (see last example).<br/>
			Biggest source-code (xhtml)
		</h:panelGroup>
		
		<h:panelGroup>
			<!-- Component oriented -->
			<!-- This approach _is_ JSF -->
			<t:div styleClass="block">
				<t:dataTable value="#{pitBean2.rows}" var="row">
					<t:column rendered="#{!fn:contains(row, '2')}">
						#{row}
					</t:column>
				</t:dataTable>
			</t:div>
		</h:panelGroup>
		<h:panelGroup>
			Only render-time tags are used<br/>
			Works as expected.<br/>
			Source-code (xhtml) is shortest and most readable one.<br/>
		</h:panelGroup>
		
		<h:panelGroup>
			<!-- Mixing both worlds  -->
			<!-- Question is: was our decision pro or contra JSF? -->
			<t:div styleClass="block">
				<t:dataTable value="#{pitBean2.rows}" var="row">
					<c:if test="#{!fn:contains(row, '2')}">
						<t:column>
							#{row}
						</t:column>
					</c:if>
				</t:dataTable>
			</t:div>
		</h:panelGroup>
		<h:panelGroup>
			Doesn't work.<br/>
			The problem: mixing compile and rendertime have strange sideeffects<br/>
			'IF' clauses are evaluated wrong, 'choose'/'when' works wrong... etc<br/>
		</h:panelGroup>
	</h:panelGrid>
	</ui:define>
</ui:composition>
